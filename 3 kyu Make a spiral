KATA:

Description:
Your task, is to create a NxN spiral with a given size.

For example, spiral with size 5 should look like this:

00000
....0
000.0
0...0
00000
and with the size 10:

0000000000
.........0
00000000.0
0......0.0
0.0000.0.0
0.0..0.0.0
0.0....0.0
0.000000.0
0........0
0000000000
Return value should contain array of arrays, of 0 and 1, for example for given size 5 result should be:

[[1,1,1,1,1],[0,0,0,0,1],[1,1,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]
Because of the edge-cases for tiny spirals, the size will be at least 5.

General rule-of-a-thumb is, that the snake made with '1' cannot touch to itself.



My Sol:

var spiralize = function(size) {
  var sp = new Array(size);
  for (var i = 0; i < sp.length; i++) {
    sp[i] = new Array(size).fill(0)
  }
  var ones = [size, size - 1, size - 1]
  for (var i = size - 3; i > 1; i -= 2) {
    ones.push(i, i);
  }
  size % 2 == 0 ? ones.push(1) : ones = ones;
  var side = []
  side[0] = [0, 0],
  side[1] = [1, sp.length - 1],
  side[2] = [sp.length - 1, sp.length - 2],
  side[3] = [sp.length - 2, 0];
  var now = 0;
  for (var i = 0; i < ones.length; i++) {
    now = i % 4;
    if (now == 0) {
      for (var j = 0; j < ones[i]; j++) {
        sp[side[0][0]][side[0][1]+j] = 1;
      }
      side[0][0] += 2;
      if (side[0][1] == 0) {
        side[0][1] += 1;
      } else {
        side[0][1] += 2;
      }
    } else if (now == 1) {
      for (var j = 0; j < ones[i]; j++) {
        sp[side[1][0]+j][side[1][1]] = 1;
      }
      side[1][0] += 2;
      side[1][1] -= 2;
    } else if (now == 2) {
      for (var j = 0; j < ones[i]; j++) {
        sp[side[2][0]][side[2][1]-j] = 1;
      }
      side[2][0] -= 2;
      side[2][1] -= 2;
    } else {
      for (var j = 0; j < ones[i]; j++) {
        sp[side[3][0]-j][side[3][1]] = 1;
      }
      side[3][0] -= 2;
      side[3][1] += 2;
    }
  }
  return sp;
}
