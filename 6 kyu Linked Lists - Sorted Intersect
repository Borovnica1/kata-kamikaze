Kata:

Description:
Linked Lists - Sorted Intersect

Write a SortedIntersect() function which creates and returns a list representing the intersection of two lists that are sorted in increasing order. Ideally, each list should only be traversed once. The resulting list should not contain duplicates.

var first = 1 -> 2 -> 2 -> 3 -> 3 -> 6 -> null
var second = 1 -> 3 -> 4 -> 5 -> -> 6 -> null
sortedIntersect(first, second) === 1 -> 3 -> 6 -> null


My Solution:

function Node(data) {
  this.data = data === undefined ? null : data;
  this.next = null;
}

function sortedIntersect(first, second, previous = 0) {
  var result = null;
  console.log('OOOOOOOOOOOOOOOOOO')
  console.log(previous)
  
  
  console.log('WWWWWWWWWWWWWWWW')
  console.log(first, second)
  
  if (first == null) {
    return first;
  }
  console.log('SSSSSSSSSSSSSSSSS')
  if (second == null) {
    return second;
  }
  
  if (first.data === second.data) {
    if (first.data !== previous) {
      result = first;
      previous = first.data;
      result.next = sortedIntersect(first.next, second.next, previous);
    }
    
    
  } else if (first.data > second.data) {
    if (result == null) {
      result = sortedIntersect(first, second.next)
    } else {
      result.next = sortedIntersect(first, second.next);
    }
    
  } else {
    if (result == null) {
      result = sortedIntersect(first.next, second)
    } else {
      result.next = sortedIntersect(first.next, second);
    }
  }
  
  return result
}
