Kata:

Description:
A famous casino is suddenly faced with a sharp decline of their revenues. They decide to offer Texas hold'em also online. Can you help them by writing an algorithm that can rank poker hands?

Task
Create a poker hand that has a method to compare itself to another poker hand:

PokerHand.prototype.compareWith = function(hand){...};
A poker hand has a constructor that accepts a string containing 5 cards:

var hand = new PokerHand("KS 2H 5C JD TD");
The characteristics of the string of cards are:

Each card consists of two characters, where
The first character is the value of the card: 2, 3, 4, 5, 6, 7, 8, 9, T(en), J(ack), Q(ueen), K(ing), A(ce)
The second character represents the suit: S(pades), H(earts), D(iamonds), C(lubs)
A space is used as card separator between cards
The result of your poker hand compare can be one of these 3 options:

var Result = 
{
    "win": 1,
    "loss": 2,
    "tie": 3
}
Notes
Apply the Texas Hold'em rules for ranking the cards.
Low aces are NOT valid in this kata.
There is no ranking for the suits.
If you finished this kata, you might want to continue with Sortable Poker Hands

My Sol:

var Result = { "win": 1, "loss": 2, "tie": 3 }

function PokerHand(hand) {
  this.has = hand;
  this.best = 'high';
  this.high = '0';
  this.ranking = 0;
}

PokerHand.prototype.compareWith = function(hand){
  const rankings = ['high', 'pair', 'two pairs', 'three', 'straight', 'flush',
                   'full', 'quads', 'straight flush', 'royal flush'];
  let iHave = '';
  let oppHave = '';
  for (let h of [this, hand]) {
    h.high = checkHigh(h.has);
    if (hasRoyalFlush(h.has)) {
      h.best = 'royal flush';
    } else if (hasStraightFlush(h.has)) {
      h.best = 'straight flush';
    } else if (hasQuads(h.has)) {
      h.best = 'quads'
    } else if (hasFullHouse(h.has)) {
      h.best = 'full'
    } else if (hasFlush(h.has)) {
      h.best = 'flush'
    } else if (hasStraight(h.has)) {
      h.best = 'straight'
    } else if (hasThree(h.has)) {
      h.best = 'three'
    } else if (hasTwoPairs(h.has)) {
      h.best = 'two pairs'
    } else if (hasPair(h.has)) {
      h.best = 'pair'
    }
    
    h.ranking = rankings.findIndex(el => el == h.best);
  }
  if (this.ranking == hand.ranking) {
    // compare high prior
    for (let i = 0; i < this.high.length; i++) {
      if (this.high[i] > hand.high[i]) {
        return Result.win;
      } else if (this.high[i] < hand.high[i]) {
        return Result.loss;
      } 
    }
    return Result.tie;
  } else if (this.ranking > hand.ranking) {
    return Result.win;
  } else {
    return Result.loss;
  }
}

function hasPair(h) {
  let values = h[0]+h[3]+h[6]+h[9]+h[12];
  values = values.split('').sort().join('');
  let vals = [0, 0];
  let j = 0;
  for (let i = 1; i < values.length; i++) {
    if (values[i] == values[i-1]) vals[j]++;
    else j = 1;
  }
  if (vals[0] == 1 || vals[1] == 1) return true
  return false;
}

function hasTwoPairs(h) {
  let values = h[0]+h[3]+h[6]+h[9]+h[12];
  values = values.split('').sort().join('');
  let d = {};
  for (let n of values) {
    if (n in d) {
      d[n]++;
    } else {
      d[n] = 1;
    }
  }
  let numberOfPairs = 0;
  for (let prop in d) {
    if (d[prop] == 2) numberOfPairs++;
    if (numberOfPairs == 2) return true;
  }
}

function hasThree(h) {
  let values = h[0]+h[3]+h[6]+h[9]+h[12];
  values = values.split('').sort().join('');
  let d = {};
  for (let n of values) {
    if (n in d) {
      d[n]++;
    } else {
      d[n] = 1;
    }
  }
  for (let prop in d) {
    if (d[prop] == 3) return true;
  }
  return false;
}

function hasStraight(h) {
  let values = h[0]+h[3]+h[6]+h[9]+h[12];
  values = values.split('').map(l => {
    switch (l) {
        case 'A': return 14
        case 'K': return 13
        case 'Q': return 12
        case 'J': return 11
        case 'T': return 10
        default: return Number(l);
    }
  }).sort((a, b) => a - b);
  for (let i = 1; i < values.length; i++) {
    if (values[i] !== values[i-1]+1) return false;
  }
  return true;
}

function hasFlush(h) {
  const suits = h[1]+h[4]+h[7]+h[10]+h[13];
  for (let i = 1; i < suits.length; i++) {
    if (suits[i] != suits[i-1]) return false;
  }
  return true;
}

function checkHigh(h) {
  let values = h[0]+h[3]+h[6]+h[9]+h[12];
  return values.split('').map(l => {
    switch (l) {
        case 'A': return 14
        case 'K': return 13
        case 'Q': return 12
        case 'J': return 11
        case 'T': return 10
        default: return Number(l);
    }
  }).sort((a, b) => b - a);
}

function hasFullHouse(h) {
  let values = h[0]+h[3]+h[6]+h[9]+h[12];
  values = values.split('').sort().join('');
  let vals = [0, 0];
  let j = 0;
  for (let i = 1; i < values.length; i++) {
    if (values[i] == values[i-1]) vals[j]++;
    else j = 1;
  }
  if ((vals[0] == 2 && vals[1] == 1) || (vals[0] == 1 && vals[1] == 2)) return true
  return false;
}

function hasQuads(h) {
  let values = h[0]+h[3]+h[6]+h[9]+h[12];
  values = values.split('').sort().join('');
  let vals = [0, 0];
  let j = 0;
  for (let i = 1; i < values.length; i++) {
    if (values[i] == values[i-1]) vals[j]++;
    else j = 1;
  }
  if (vals[0] == 3 || vals[1] == 3) return true
  return false;
}

function hasStraightFlush(h) {
  const suits = h[1]+h[4]+h[7]+h[10]+h[13];
  let values = h[0]+h[3]+h[6]+h[9]+h[12];
  values = values.split('').map(l => {
    switch (l) {
        case 'A': return 14
        case 'K': return 13
        case 'Q': return 12
        case 'J': return 11
        case 'T': return 10
        default: return Number(l);
    }
  }).sort((a, b) => a - b);
  for (let i = 1; i < values.length; i++) {
    if (values[i] !== values[i-1]+1) return false;
  }
  for (let i = 1; i < suits.length; i++) {
    if (suits[i] != suits[i-1]) return false;
  }
  return true;
}

function hasRoyalFlush(h) {
  const suits = h[1]+h[4]+h[7]+h[10]+h[13];
  if (/\d/.test(h)) return false;
  for (let i = 1; i < suits.length; i++) {
    if (suits[i] != suits[i-1]) return false;
  }
  return true;
}
