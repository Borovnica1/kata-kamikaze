Kata:

Description:
Take the following IPv4 address: 128.32.10.1 This address has 4 octets where each octet is a single byte (or 8 bits).

1st octet 128 has the binary representation: 10000000
2nd octet 32 has the binary representation: 00100000
3rd octet 10 has the binary representation: 00001010
4th octet 1 has the binary representation: 00000001
So 128.32.10.1 == 10000000.00100000.00001010.00000001

Because the above IP address has 32 bits, we can represent it as the 32 bit number: 2149583361.

Write a function ip_to_int32(ip) ( JS: ipToInt32(ip) ) that takes an IPv4 address and returns a 32 bit number.

  ipToInt32("128.32.10.1") => 2149583361


My Solution:

function ipToInt32(ip){
  var numbers = ip.split('.');
  var binary = [];
  for (var i = 0; i < numbers.length; i++) {
    var number = parseInt(numbers[i], 10).toString(2); 
    while (number.length < 8) {
      number = '0' + number;
    }
    binary.push(number);
  }
  binary = binary.join('');
  var finalNumber = 0,
      j = binary.length - 1;
  
  // my first recursion usage lol
  function calcBin(num) {
    if (num == 1) {
      return 1;
    } else {
      return 2 * calcBin(num - 1);
    }
  }
  
  while (j >= 0) {
    if (binary.charAt(j) == 1) {
      finalNumber += calcBin(32 - j);
    }
    j--;
  }
  
  console.log(numbers, binary, finalNumber, calcBin(3), binary.charAt(31));
  return finalNumber;
}
