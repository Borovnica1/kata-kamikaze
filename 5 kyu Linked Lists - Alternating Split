Kata:

Description:
Linked Lists - Alternating Split

Write an AlternatingSplit() function that takes one list and divides up its nodes to make two smaller lists. The sublists should be made from alternating elements in the original list. So if the original list is a -> b -> a -> b -> a -> null then one sublist should be a -> a -> a -> null and the other should be b -> b -> null.

###JavaScript

var list = 1 -> 2 -> 3 -> 4 -> 5 -> null
alternatingSplit(list).first === 1 -> 3 -> 5 -> null
alternatingSplit(list).second === 2 -> 4 -> null

My Solution:

function Node(data) {
  this.data = data;
  this.next = null;
}

function Context(first, second) {
  this.first = first;
  this.second = second;
}

function alternatingSplit(head) {
  console.log(head.next.next)
  
  var counter = 0;
  var current = head.next.next;
  var first = new Node(head.data), 
      second = new Node(head.next.data);
  var firstRef = first,
      secondRef = second;
  while (current != null) {
    console.log(counter)
    console.log(firstRef, secondRef)
    if (counter % 2 == 0) {
      firstRef.next = current;
      firstRef = firstRef.next;
     
    } else {
      secondRef.next = current;
      secondRef = secondRef.next;
    }
    
    current = current.next;
    counter++;
  }
  firstRef.next = current;
  firstRef = firstRef.next;
  secondRef.next = current;
  secondRef = secondRef.next;
  console.log(firstRef, secondRef)
  console.log('LOOOOOOOOOOOOOOOOOL');
  console.log(first);
  console.log(second)
  return new Context(first, second);
}
