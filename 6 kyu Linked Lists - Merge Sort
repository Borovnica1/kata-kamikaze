KATA:

Linked Lists - Merge Sort

Write a MergeSort() function which recursively sorts a list in ascending order. Note that this problem requires recursion. Given FrontBackSplit() and SortedMerge(), you can write a classic recursive MergeSort(). Split the list into two smaller lists, recursively sort those lists, and finally merge the two sorted lists together into a single sorted list. Return the list.

var list = 4 -> 2 -> 1 -> 3 -> 8 -> 9 -> null
mergeSort(list) === 1 -> 2 -> 3 -> 4 -> 8 -> 9 -> null
FrontBackSplit() and SortedMerge() need not be redefined. You may call these functions in your solution.

These function names will depend on the accepted naming conventions of language you are using. In Python, FrontBackSplit() is actually front_back_split(). In JavaScript, it is frontBackSplit(), etc.

My Solution:

function Node(data) {
  this.data = data === undefined ? null : data;
  this.next = null;
}

function mergeSort(head) {
  if (head === null || head.next === null) {
            return head
        }

        var middle = getMiddle(head);
        var middleToNext = middle.next;
        middle.next = null;
     
        var left = mergeSort(head);
        var right = mergeSort(middleToNext);
     
        var sortedList = sortedMerge(left, right)

        return sortedList;
}

// Utility function
function getMiddle(head) {
        if (head === null) {
            return head
        }
        
        var slow = head
        var fast = head
        
        while (fast.next !== null && fast.next.next !== null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow
}
    
// Utility function
function sortedMerge(left, right) {
    var result = [null];
          
        
        if (left === null){ 
            return right;
        }
        if (right === null){ 
            return left;
        }
        
        if (left.data <= right.data) {
            result = left;
            result.next = sortedMerge(left.next, right)
        } else {
            result = right;
            result.next = sortedMerge(left, right.next)
        }
        return result
            
}
