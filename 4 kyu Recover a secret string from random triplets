Kata:

Description:
There is a secret string which is unknown to you. Given a collection of random triplets from the string, recover the original string.

A triplet here is defined as a sequence of three letters such that each letter occurs somewhere before the next in the given string. "whi" is a triplet for the string "whatisup".

As a simplification, you may assume that no letter occurs more than once in the secret string.

You can assume nothing about the triplets given to you other than that they are valid triplets and that they contain sufficient information to deduce the original string. In particular, this means that the secret string will never contain letters that do not occur in one of the triplets given to you.

My Sol:

var recoverSecret = function(triplets) {
  var lefts = new Array(triplets.length).fill(0),
      tempLefts = new Array(triplets.length).fill(0);
  console.log(lefts)
  var possible = {},
      word = '';
  var k = 0;
  while (lefts.reduce((a, b) => a+b) !== 3*triplets.length) {
    possible = {}
    console.log(triplets)
    console.log('lol')
    for (var i = 0; i < triplets.length; i++) {
      if (triplets[i][lefts[i]] == null) continue
      if (triplets[i][lefts[i]] in possible) {
        // already in dict
        
      } else {
        possible[triplets[i][lefts[i]]] = 1;
      }
      tempLefts[i] = tempLefts[i] + 1;
    }
    console.log('FIRST FIRST -----');
    console.log(possible, tempLefts);
    // now deduce them
    for (var i = 0; i < triplets.length; i++) {
      if (triplets[i][tempLefts[i]] in possible) {
        // already in dict
        delete possible[[triplets[i][tempLefts[i]]]];
      }
      tempLefts[i] = tempLefts[i] - 1;
    }
    var items = Object.keys(possible).map(function(key) {
      return [key, possible[key]];
    });
    console.log(possible, tempLefts);
    console.log(items[0]);
    for (var i = 0; i < triplets.length; i++) {
      if (items[0][0] == triplets[i][lefts[i]]) {
        triplets[i][lefts[i]] = null;
        lefts[i] = lefts[i] + 1;
        tempLefts[i] = tempLefts[i] + 1;
      }
    }
    word += items[0][0]
    console.log(word, lefts, tempLefts)
    k++;
  }
  return word
  /*
  [keep letters indexed and deleted]
  [0, 2, 0, 0, 1, 0, 2]
  // take first from left
  [t, w, a, h]
  // deduct until one letter left
  [w] - h, - t, -a
  // and then deduct that letter occurrences
  
  [t, h, a] - t, - a 
  [a] we go full to 2 
  ['t','u','p'],
  [' ',' ','i'],
  ['t','s','u'],
  ['a','t','s'],
  [' ','a','p'],
  ['t','i','s'],
  [' ',' ','s']*/
}
