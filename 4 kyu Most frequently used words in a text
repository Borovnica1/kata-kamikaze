Kata:

Description:
Write a function that, given a string of text (possibly with punctuation and line-breaks), returns an array of the top-3 most occurring words, in descending order of the number of occurrences.

Assumptions:
A word is a string of letters (A to Z) optionally containing one or more apostrophes (') in ASCII. (No need to handle fancy punctuation.)
Matches should be case-insensitive, and the words in the result should be lowercased.
Ties may be broken arbitrarily.
If a text contains fewer than three unique words, then either the top-2 or top-1 words should be returned, or an empty array if a text contains no words.
Examples:
top_3_words("In a village of La Mancha, the name of which I have no desire to call to
mind, there lived not long since one of those gentlemen that keep a lance
in the lance-rack, an old buckler, a lean hack, and a greyhound for
coursing. An olla of rather more beef than mutton, a salad on most
nights, scraps on Saturdays, lentils on Fridays, and a pigeon or so extra
on Sundays, made away with three-quarters of his income.")
# => ["a", "of", "on"]

top_3_words("e e e e DDD ddd DdD: ddd ddd aa aA Aa, bb cc cC e e e")
# => ["e", "ddd", "aa"]

top_3_words("  //wont won't won't")
# => ["won't", "wont"]
Bonus points (not really, but just for fun):
Avoid creating an array whose memory footprint is roughly as big as the input text.
Avoid sorting the entire array of unique words.


My Sol:

function topThreeWords(text) {
  var h = {}
  var words = []
  text.split(' ').forEach(word => {
    if (word.length == 0) return 0;
    // split word more
    var i = 0;
    word = word.toUpperCase();
    word = word.split('');
    word.push('!');
    var isWord = false;
    while (word.length > 0) {
      if (word[i] >= 'A' && word[i] <= 'Z') {
        i += 1
        isWord = true;
      } else if (word[i] == '\'') {
        i += 1
      } else {
        if (i > 0 && isWord) {
          words.push(word.splice(0, i).join(''))
        }
        word.splice(0, 1);
        i = 0;
      }
    }
  });
  words.forEach(word => {
    if (word in h) {
      h[word] += 1;
    } else {
      h[word] = 1;
    }
  });
  var items = Object.keys(h).map(function(key) {
    return [key, h[key]];
  });
  // Sort the array based on the second element
  items.sort(function(first, second) {
    return second[1] - first[1];
  });
  var res = []
  for (var i = 0; i < items.length; i++) {
    res.push(items[i][0].toLowerCase())
    if (i == 2) break
  }
  return res
}
