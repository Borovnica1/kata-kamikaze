Kata:

Description:
Create a function that takes a positive integer and returns the next bigger number that can be formed by rearranging its digits. For example:

12 ==> 21
513 ==> 531
2017 ==> 2071
nextBigger(num: 12)   // returns 21
nextBigger(num: 513)  // returns 531
nextBigger(num: 2017) // returns 2071
If the digits can't be rearranged to form a bigger number, return -1 (or nil in Swift):

9 ==> -1
111 ==> -1
531 ==> -1
nextBigger(num: 9)   // returns nil
nextBigger(num: 111) // returns nil
nextBigger(num: 531) // returns nil

My Sol:

function nextBigger(n){
  var digits = []
  while (n >= 10) {
    digits.unshift(n % 10);
    n = Math.floor(n / 10);
  }
  digits.unshift(n)
  var subArr = []
  var switched = false;
  for (var i = digits.length - 1; 0 < i; i--) {
    subArr.unshift(digits[i])
    subArr.sort((a, b) => a - b);
    subArr.every((n, j) => {
      if (n > digits[i - 1]) {
        subArr.unshift(digits[i-1])
        digits[i - 1] = n
        subArr.splice(j+1, 1);
        switched = true
        return false
      }
      return true
    })
    if (switched) {
      subArr.sort((a, b) => a - b);
      for (var j = i; j < digits.length; j++) {
        digits[j] = subArr[0];
        subArr.shift()
      }
      break;
    }
  }
  if (switched) return Number(digits.join(''))
  return -1
}
