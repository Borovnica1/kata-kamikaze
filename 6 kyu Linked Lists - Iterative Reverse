Kata:

Description:
Linked Lists - Iterative Reverse

Write an iterative Reverse() function that reverses a linked list. Ideally, Reverse() should only need to make one pass of the list.

var list = 2 -> 1 -> 3 -> 6 -> 5 -> null
reverse(list)
list === 5 -> 6 -> 3 -> 1 -> 2 -> null
The push() and buildOneTwoThree() functions need not be redefined.


Soll:

function Node(data, next) {
  this.data = data === undefined ? null : data;
  this.next = next;
}

function reverse(list) {
  if (list == null) return list
  var previous = null,
      current = list,
      next = list;
  
  while (current != null){
    next = next.next;
    current.next = previous;
    previous = new Node(current.data, previous)
    current = next;
  }
  list.data = previous.data
  list.next = previous.next
}
