Kata:

Description:
Write a function that will solve a 9x9 Sudoku puzzle. The function will take one argument consisting of the 2D puzzle array, with the value 0 representing an unknown square.

The Sudokus tested against your function will be "easy" (i.e. determinable; there will be no need to assume and test possibilities on unknowns) and can be solved with a brute-force approach.

For Sudoku rules, see the Wikipedia article.

var puzzle = [
            [5,3,0,0,7,0,0,0,0],
            [6,0,0,1,9,5,0,0,0],
            [0,9,8,0,0,0,0,6,0],
            [8,0,0,0,6,0,0,0,3],
            [4,0,0,8,0,3,0,0,1],
            [7,0,0,0,2,0,0,0,6],
            [0,6,0,0,0,0,2,8,0],
            [0,0,0,4,1,9,0,0,5],
            [0,0,0,0,8,0,0,7,9]];

sudoku(puzzle);
/* Should return
[[5,3,4,6,7,8,9,1,2],
[6,7,2,1,9,5,3,4,8],
[1,9,8,3,4,2,5,6,7],
[8,5,9,7,6,1,4,2,3],
[4,2,6,8,5,3,7,9,1],
[7,1,3,9,2,4,8,5,6],
[9,6,1,5,3,7,2,8,4],
[2,8,7,4,1,9,6,3,5],
[3,4,5,2,8,6,1,7,9]] 

MY Sol:

function sudoku(puzzle) {  
  function solve(puz) {
    for (var i = 0; i < puz.length; i++) {
      for (var j = 0; j < puz.length; j++) {
        if (puz[i][j] == 0) {
          for (var n = 1; n < 10; n++) {
            if (possible(i,j,n, puz)) {
              puz[i][j] = n;
              if (solve(puz)) {
                return puz;
              }
              puz[i][j] = 0;
            } 
          }
          return false
        }
      }
    }
    return true;
  }
  var res = solve(puzzle);
  return res;
  
  function possible(x, y, n, puz) {
    // check col
    for (var i = 0; i < puz.length; i++) {
      if (puz[i][y] == n) return false;
    }
    //check row
    for (var j = 0; j < puz.length; j++) {
      if (puz[x][j] == n) return false;
    }
    // check subgrid
    var startI = Math.floor(x / 3) * 3;
    var startJ = Math.floor(y / 3) * 3;
    for (var i = 0; i < 9; i++) {
      if (puz[startI][startJ] == n) return false;
      startI += 1;
      if (startI % 3 == 0) {
        startI -= 3;
        startJ += 1;
      }
    }
    return true
  }
}
